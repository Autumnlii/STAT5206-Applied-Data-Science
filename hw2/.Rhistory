lines(lowess(stay~risk))
plot(stay~risk)
par(mfrow=c(1,1))
plot(stay~risk)
abline(stay,risk)
lm_risk = lm(stay~risk)
summary(lm_risk)
plot(stay~xrays)
abline(stay,xrays)
lm_xrays = lm(stay~xrays)
abline(stay,xrays)
plot(stay~xrays)
abline(stay,xrays)
lm_xrays = lm(stay~xrays)
summary(lm_xrays)
plot(stay~afs)
abline(stay,afs)
par(mfrow=c(1,1))
plot(stay~xrays)
abline(stay,xrays)
line(stay,xrays)
lines(stay,xrays)
abline(stay,xrays)
abline(stay,xrays)
lm_xrays = lm(stay~xrays)
abline(stay,xrays)
plot(stay~risk)
abline(stay,risk)
plot(stay~xrays)
abline(stay,xrays)
plot(stay~afs)
abline(stay,afs)
abline(stay,afs)
lm_afs = lm(stay~afs)
summary(lm_afs)
line(0,0)
abline(stay,xrays)
abline(stay,risk)
plot(stay~xrays)
abline(stay,xrays)
lm_xrays = lm(stay~xrays)
summary(lm_xrays)
line(0)
lines(stay,afs)
plot(stay~afs)
lines(stay,afs)
abline(stay,afs)
plot(stay~afs)
abline(stay,afs)
abline(stay,afs)
abline(stay,afs)
lines(stay,xrays)
plot(stay~xrays)
lines(stay,xrays)
lm_xrays = lm(stay~xrays)
summary(lm_xrays)
plot(stay~afs)
lines(stay,afs)
abline?
,..
?abline
lm_xrays = lm(stay~xrays)
plot(stay~xrays)
lines(lm_xrays)
ablines(lm_xrays)
lm_xrays = lm(stay~xrays)
plot(stay~xrays)
abline(lm_xrays)
lm_afs = lm(stay~afs)
plot(stay~risk)
abline(lm_afs)
summary(lm_afs)
senic.data<-"~/Desktop/2016 fall/regression/data/SENIC.txt"
senic = read.table(file=senic.data,head=T)
stay=as.numeric(senic$Stay)
risk=as.numeric(senic$Risk)
afs=as.numeric(senic$AFS)
xrays=as.numeric(senic$Xray)
par(mfrow=c(1,3))
plot(stay~afs)
lines(lowess(stay~afs))
plot(stay~xrays, main = "lowess smoother")
lines(lowess(stay~xrays))
plot(stay~risk)
lines(lowess(stay~risk))
# From the plot above, we can tell that the simple linear mean functions do not fit in these 3 models. None of them follow a perfectly linear trend. After the data tranformation or data cleaning, I think "risk","xrays" and "AFS" could be possible predictor for "stay".
```
par(mfrow=c(1,3))
lm_risk = lm(stay~risk)
plot(stay~risk)
abline(lm_risk,col="red")
lm_xrays = lm(stay~xrays)
plot(stay~xrays,main = "LSE regression")
abline(lm_xrays,col="red")
lm_afs = lm(stay~afs)
plot(stay~afs)
abline(lm_afs,col="red")
lines(lowess(stay~afs))
senic.data<-"~/Desktop/2016 fall/regression/data/SENIC.txt"
senic = read.table(file=senic.data,head=T)
stay=as.numeric(senic$Stay)
risk=as.numeric(senic$Risk)
afs=as.numeric(senic$AFS)
xrays=as.numeric(senic$Xray)
par(mfrow=c(1,3))
plot(stay~afs)
lines(lowess(stay~afs))
senic.data<-"~/Desktop/2016 fall/regression/data/SENIC.txt"
senic = read.table(file=senic.data,head=T)
stay=as.numeric(senic$Stay)
risk=as.numeric(senic$Risk)
afs=as.numeric(senic$AFS)
xrays=as.numeric(senic$Xray)
par(mfrow=c(1,3))
plot(stay~afs)
lines(lowess(stay~afs),col="blue")
plot(stay~xrays, main = "lowess smoother")
lines(lowess(stay~xrays),col="blue")
plot(stay~risk)
lines(lowess(stay~risk),col="blue")
1-0.16-0.36
16*47+32*47-16*32
16*15+32*31
lab2_data = "~/Desktop/2016 fall/5206/lab2/diamonds-1.csv"
diamonds = read.csv(file =lab2_data,head = T)
names(diamonds)
#View(lab2)
carat = diamonds$carat
price = diamonds$price
lm0 = lm(price~carat)
coeff = coefficients(lm0);coeff
#The intercept is -2256.367, and the slope is 7756.426
```
Recall from lecture that the estimates $\hat{\beta}_0$ and $\hat{\beta}_1$ that you just calculated with **lm()** are functions of the data values and are therefore themselves are random (they inherit variability from the data).  If we were to recollect the diamonds data over and over again, the estimates would be different each time.
n = length(row(diamonds)); n
resample1 <- sample(1:n, n, replace = TRUE)
B <- 1000
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
# Write code that fills in the matrix resample_values with re-samples
resampled_values[b,]<- sample(1:n, n, replace = TRUE)
}
resampled_data <- diamonds[resample1, ]
lm1 = lm(resampled_data[,1]~resampled_data[,2])
resample1_ests <- coefficients(lm1)
resample1_ests
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = diamonds[resampled_rows]
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
head(resampled_ests)
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = diamonds[resampled_rows]
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = diamonds[resampled_rows]
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
head(resampled_ests)
diff_estimates <- resample[,"slope_East"] - coefficients(lm0)[2]
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = diamonds[resampled_rows]
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
resampled_data
resampled_rows
resampled_rows = resampled_values[b,]
resampled_rows
resampled_data = diamonds[resampled_rows]
resampled_data = diamonds[resampled_rows,]
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
head(resampled_ests)
resampled_data = diamonds[resampled_rows,]
resampled_data
resampled_data = as.numeric(diamonds[resampled_rows,])
resampled_rows = resampled_values[b,]
resampled_data = diamonds[resampled_rows,]
resampled_data
resampled_rows = resampled_values[b,]
resampled_rows
resampled_data$price
resampled_data$carat
resampled_rows = resampled_values[b,]
resampled_data = na.omit(diamonds[resampled_rows,])
resampled_data
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = na.omit(diamonds[resampled_rows,])
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
}
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data)
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows = resampled_values[b,]
resampled_data = na.omit(diamonds[resampled_rows,])
resampled_ests[b,] = coefficients(lm(price~carat,data = resampled_data))
}
head(resampled_ests)
diff_estimates <- resample[,"slope_East"] - coefficients(lm0)[2];diff_estimates
diff_estimates <- resampled_ests[,"slope_East"] - coefficients(lm0)[2];diff_estimates
diff_estimates <- resampled_ests[,"Slope_East"] - coefficients(lm0)[2];diff_estimates
diff_estimates <- resampled_ests[,"Slope_East"] - coefficients(lm0)[2] diff_estimates
diff_estimates <- resampled_ests[,"Slope_East"] - coefficients(lm0)[2]; diff_estimates
resampled_ests[,"Slope_East"]
resampled_ests[,2]
diff_estimates <- resampled_ests[,2] - coefficients(lm0)[2]; diff_estimates
```
resampled_ests[,"Slope_East"]
resampled_ests
resampled_ests[2,]
resampled_ests[1,]
resampled_ests[,2]
diff_estimates <- resampled_ests[,2] - coefficients(lm0)[2];diff_estimates
diff_estimates <- resampled_ests[,2] - coefficients(lm0)[2];diff_estimates
diff_estimates <- resampled_ests[,2] - coefficients(lm0)[2];
diff_estimates
hist(diff_estimates,xlab = "Original - Resampled slope Estimates",main = "Bootstrap Resamples")
diff_estimates <- resampled_ests[,2] - coefficients(lm0)[2];
diff_estimates[1,]
resampled_ests[1,]
sd(resampled_ests[,2])
Cl <- quantile(diff_estimates,probs = 0.025)
Cu <- quantile(diff_estimates,probs = 0.075)
int <- c(Cu, Cl)
int
setwd("~/Desktop/2016 fall/5206/hw2")
lab2 = "~/Desktop/2016 fall/5206/hw2/NYHousing.cvs"
ny = read.table(file = hw2, head = T)
hw2 = "~/Desktop/2016 fall/5206/hw2/NYHousing.cvs"
ny = read.table(file = hw2, head = T)
ny = read.csv(file = hw2, head = T)
hw2 = "~/Desktop/2016 fall/5206/hw2/NYHousing.cvs"
ny = read.csv(file = hw2, head = T)
hw2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.cvs"
ny = read.csv(file = hw2, head = T)
hw2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.cvs"
ny = read.csv(file = hw2, head = T)
hw2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.csv"
ny = read.csv(file = hw2, head = T)
ny = read.csv(file = hw2, head=T)
ny = read.csv(file = hw2, header=T)
data2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.csv"
ny = read.csv(file = data2, head=TRUE)
setwd("~/Desktop/2016 fall/5206/hw2")
data2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.csv"
ny = read.csv(file = data2, head=TRUE)
...
ny = read.csv(file = data2, head=TRUE)
data2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.csv"
ny = read.csv(file = data2, head=TRUE)
dim(ny)
?dim
nrow = dim(ny)[1]
ncol = dim(ny)[2]
nrow = dim(ny)[1];nrow
ncol = dim(ny)[2];ncol
data2 = "~/Desktop/2016 fall/5206/hw2/NYChousing.csv"
housing = read.csv(file = data2, head=TRUE)
nrow = dim(housing)[1];nrow
ncol = dim(housing)[2];ncol
apply(is.na(housing), 2, sum).
apply(is.na(housing), 2, sum)
View(housing)
?apply
?is.na
?delete
apply(is.na(housing), 2, NULL)
value = housing$Value
is.na(value)
length(is.na(value))
omit.na(value)
na.omit(value)
length(value)
value1 = na.omit(value)
length(value1)
value = housing$Value
length(is.na(value))
value1 = na.omit(value)
length(value1)
apply(is.na(housing), 2, sum)
Reacn = housing$REACNumber
REACNumber = housing$REACNumber
REACNumber1 = na.omit(REACNumber)
CityCouncilDistrict1 = na.omit(CityCouncilDistrict)
CityCouncilDistrict = housing$CityCouncilDistrict
CityCouncilDistrict1 = na.omit(CityCouncilDistrict)
Lon = housing$Lon
Lon1 = na.omit(Lon)
SAR =housing$StartAffordabilityRestrictions
SAR1= na.omit(SAR)
housing[1,]
housing[1,]==NA
housing[1,]
housing[2,]
is.na(housing[1,])
for(i in 1:nrows){
if housing[i,]==T{
housing[i]=NULL
for(i in 1:nrows){
if housing[i,]==T{
housing[i,]=NULL
for( i in 1:nrows){
if housing[i,]==T{
is.na(housing[1,])
is.na(housing[1,])==T
sum(is.na(housing[1,]))
for( i in 1:nrows){
if (sum(is.na(housing[1,])) > 0){
housing[i,]=NULL
}
}
for( i in 1:nrow){
if (sum(is.na(housing[1,])) > 0){
housing[i,]=NULL
}
}
dim(housing)
for( i in 1:nrow){
if (sum(is.na(housing[i,])) > 0){
housing[i,] = NULL
}
}
?remov
??remove
for( i in 1:nrow){
if (sum(is.na(housing[i,])) > 0){
housing[i,] = NULL
}
}
?data.frame
for( i in 1:nrow){
if (sum(is.na(housing[i,])) > 0){
housing[i,] = data.frame(NULL)
}
}
dim(housing)
for( i in 1:nrow){
if (sum(is.na(housing[i,])) > 0){
housing[i,] = C=c(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
}
}
housing[complete.cases(housing),]
dim(housing[complete.cases(housing),])
apply(is.na(housing), 2, sum)
dim(housing[complete.cases(housing),])[1]
apply(is.na(housing), 2, sum)
52+15+1873+10+5+15
dim(housing[complete.cases(housing),])[1]
2056-1970
dim(housing[complete.cases(housing),])
apply(is.na(housing), 2, sum)
sum(apply(is.na(housing), 2, sum))
sum(apply(is.na(housing), 2, sum))
1970+630
dim(housing[complete.cases(housing),])[1]
dim(housing)[1]-dim(housing[complete.cases(housing),])[1]
logValue=log(value)
summary(logValue)
housing2 = housing[complete.cases(housing),]
dim(housing)[1]-dim(housing2,])[1]
housing2 = housing[complete.cases(housing),]
dim(housing)[1]-dim(housing2)[1]
value2 = housing2$Value
logValue=log(value2)
summary(logValue)
UnitCount1 = housing$UnitCount
logUnits = log(UnitCount)
```
UnitCount1 = housing$UnitCount
logUnits = log(UnitCount1)
UnitCount1 = housing2$UnitCount
logUnits = log(UnitCount1)
YearBuilt = housing$YearBuilt
YearBuilt>&==1950
YearBuilt>=1950
housing2$YearBuilt>=1950
plot(logValue,logUnits)
plot(logValue~logUnits)
plot(logValue~logUnits,col = factor(housing$after1950))
plot(logValue~logUnits,col = factor(housing$after1950))
plot(logValue,logUnits,col = factor(housing$after1950))
plot(logValue~logUnits)
plot(logValue~logUnits,col = factor(housing$after1950))
legend(logValue,logUnits,"bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
legend(logValue,logUnits,"bottomright", legend = levels(factor(housing2$after1950)), fill = unique(factor(housing$after1950)))
legend(logValue,logUnits,"bottomright", legend = levels(factor(housing2$after1950)), fill = unique(factor(housing2$after1950)))
legend("bottomright", legend = levels(factor(housing2$after1950)), fill = unique(factor(housing2$after1950)))
after1950=housing2$YearBuilt>=1950
housing3=cbind(housing2,after1950)
legend("bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
legend(logValue,logUnits,"bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
legend(logValue~logUnits,"bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
legend((logValue,logUnits),"bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
legend(("bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
legend("bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
plot(logValue~logUnits)
legend("bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
plot(logValue~logUnits,col = factor(housing3$after1950))
legend("bottomright", legend = levels(factor(housing3$after1950)), fill = unique(factor(housing3$after1950)))
cor(logValue,logUnits)
Borough = housing3$Borough
logValue[Borough=="Manhattan"]
cor(logValue[Borough=="Manhattan"],logUnits[Borough=="Manhattan"])
cor(logValue[Borough=="Brooklyn"],logUnits[Borough=="Brooklyn"])
cor(logValue[after1950=="TRUE"],logUnits[after1950=="TRUE"])
cor(logValue[after1950=="FALSE"],logUnits[after1950=="FALSE"])
par(mfrow=c(1,2))
plot(logValue[Borough=="Manhattan"],logUnits[Borough=="Manhattan"])
plot(logValue[Borough=="Manhattan"],logUnits[Borough=="Manhattan"],xlab="logValue in Manhattan")
plot(logValue[logUnits[Borough=="Manhattan"],Borough=="Manhattan"],xlab="logUnits",ylab ="log value",main = "Manhattan")
plot(logValue[Borough=="Manhattan"],logUnits[Borough=="Manhattan"],xlab="logUnits",ylab ="log value",main = "Manhattan")
plot(logValue[Borough=="Brooklyn"],logUnits[Borough=="Brooklyn"],xlab="logUnits",ylab ="log value",main = "Brooklyn")
manhat.props <- c()
for (props in 1:nrow(housing3)) {
if (housing3$Borough[props] == "Manhattan") {
manhat.props <- c(manhat.props, props)
}
}
med.value <- c()
for (props in manhat.props) {
med.value <- c(med.value, housing3$Value[props])
}
med.value <- median(med.value, na.rm = TRUE)
med.value
manhat.props
housing3$Value[Borough=="Manhattan"]
median(housing3$Value[Borough=="Manhattan"])
boxplot.triple = boxplot(housing3$Value,housing3$Borough)
boxplot.triple = boxplot(housing3$Value~housing3$Borough)
par(mfrow=c(1,1))
boxplot.triple = boxplot(housing3$Value~housing3$Borough)
boxplot.triple = boxplot(housing3$Value~housing3$Borough,at = c(1, 1.8, 2.6, 6, 6.8, 7.6), xaxt='n')
boxplot.triple = boxplot(housing3$Value~housing3$Borough,at = c(91440, 1123785, 2008260, 3368950, 6714000), xaxt='n')
boxplot.triple = boxplot(housing3$Value~housing3$Borough,at = c(91440, 1123785, 2008260, 3368950, 6714000), xaxt='n',ylim = c(min(0, min(co2.ny, co2.london, co2.la)),)
boxplot.triple = boxplot(housing3$Value~housing3$Borough)
boxplot.triple = boxplot(housing3$Value~housing3$Borough)
?boxplot
boxplot.triple = boxplot(housing3$Value~housing3$Borough,data = housing3)
?boxplot
boxplot.triple = boxplot(housing3$Value~housing3$Borough,data = housing3,col = "lightgray",notch = TRUE, add = TRUE,)
boxplot.triple = boxplot(housing3$Value~housing3$Borough,data = housing3,col = "lightgray",notch = TRUE, add = TRUE)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = TRUE, add = TRUE)
logValue=log(value2)
summary(logValue)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = TRUE, add = TRUE)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12.3089450684508, 13.9322112389739, 14.5127792334834))
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16))
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = c(min(0, min(logValue[Borough=="Manhattan"],logValue[Borough=="Brooklyn"],logValue[Borough=="Bronx"],logValue[Borough=="Queens"],logValue[Borough=="Staten Island"])))
//
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = c(min(0, min(logValue[Borough=="Manhattan"],logValue[Borough=="Brooklyn"],logValue[Borough=="Bronx"],logValue[Borough=="Queens"],logValue[Borough=="Staten Island"]))))
2e+08
as.numeric(2e+08)
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = c(min(0, min(logValue[Borough=="Manhattan"],logValue[Borough=="Brooklyn"],logValue[Borough=="Bronx"],logValue[Borough=="Queens"],logValue[Borough=="Staten Island"]))),labels = comma)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',labels = comma)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',labels = comma)
yrange <- c(0, 1e6)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',labels = comma,ylim = yrange)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',labels = comma,ylim = yrange)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = yrange)
labels <- format(ticks, big.mark=",", scientific=FALSE)
?format
labels <- format(logValue, big.mark=",", scientific=FALSE)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = yrange,lables =lables)
labels <- format(logValue, big.mark=",", scientific=FALSE)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = yrange,lables =lables)
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n',ylim = yrange,lable =lables)
l <- format(logValue, big.mark=",", scientific=FALSE)
boxplot.triple = boxplot(l~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
l <- format(logValue, big.mark=",", scientific=FALSE)
l
l1=as.numeric(l)
l1
boxplot.triple = boxplot(l1~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
l1=round(as.numeric(l),digits=1)
boxplot.triple = boxplot(l1~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
l1=round(as.numeric(l),digits=1)
l1
boxplot.triple = boxplot(l1~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
l1=round(as.numeric(l),digits=0)
boxplot.triple = boxplot(l1~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,at = c(12, 13, 14,15,16),xaxt='n')
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,xaxt='n')
median(Value[Borough=="Manhattan"]])
median(Value[Borough=="Manhattan"])
median(housing3$Value[Borough=="Manhattan"])
median(housing3$Value[Borough=="Bronx"])
median(housing3$Value[Borough=="Brooklyn"])
median(housing3$Value[Borough=="Queens"])
median(housing3$Value[Borough=="Staten Island"])
par(mfrow=c(1,1))
boxplot.triple = boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE,xaxt='n')
boxplot(logValue~housing3$Borough,data = housing3,col = "lightgray",notch = FALSE, add = TRUE)
sum(apply(is.na(housing), 2, sum))
