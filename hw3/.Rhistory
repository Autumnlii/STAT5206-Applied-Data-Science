train = Weekly[fold[(121*i) : ((9-i)*121)], ]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
test.error = sum(predictions != test$Direction)/n.test
ERR[i,] = test.error
}
ERR
i=1
test  = Weekly[fold[((i-1)*121) : (121*i)],]
train = weekly - train
train = Weekly - test
train = sefdiff(Weekly,test)
train = setdiff(Weekly,test)
View(train)
nrow(train)
test  = Weekly[fold[((i-1)*121) : (121*i)],]
train = setdiff(Weekly,test)
nrow(train)
?set
?setdiff
train = setdiff(test,Weekly)
nrow(train)
test  = Weekly[fold[((i-1)*121) : (121*i)],]
train = setdiff(test,Weekly)
nrow(train)
121*2
121*3
121:242
fold(-224,-121)
fold[-221,-9]
for(i in 1:9){
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
test.error = sum(predictions != test$Direction)/n.test
ERR[i,] = test.error
}
ERR
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
test.error = sum(predictions != test$Direction)/n.test
ERR1 = test.error
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test
ERR1
121*3
363-122
121*2
242-122
fold-fold[1:122]
?setkey
library(data.table)
fold[！fold[1:121]]
fold[!fold[1:121]]
set1 = fold[1:121]
fold[!set1]
test_rows = fold[1:121]
test  = Weekly[teat_rows,]
test  = Weekly[test_rows,]
train = Weekly[!test_rows,]
nrow(train)
nrow(test)
!test_rows
test_rows = [1:121]
train = Weekly[fold[!test_rows],]
nrow(train)
!test_rows
fold[!test_rows]
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test
ERR1
122*2
test  = Weekly[fold[122:244],]
train1 = Weekly[fold[(245:1089)],]
train2 = Weekly[fold[1:121],]
train = cbind(train1,train2)
test  = Weekly[fold[122:244],]
train1 = Weekly[fold[(245:1089)],]
train2 = Weekly[fold[1:121],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
ERR2= sum(predictions != test$Direction)/n.test
ERR2
121*3
363-245+1
121*2
363-242+1
363-243+1
test  = Weekly[fold[243:363],]
train1 = Weekly[fold[(364:1089)],]
train2 = Weekly[fold[1:242],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
ERR3= sum(predictions != test$Direction)/n.test;ERR3
ERR[3,]= ERR3
EER
ERR
ERR[1,]
ERR[,1]
ERR[,3]= ERR3
ERR3= sum(predictions != test$Direction)/n.test;ERR3
121*4
test  = Weekly[fold[244:484],]
train1 = Weekly[fold[(485:1089)],]
train2 = Weekly[fold[1:243],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=4, lag.data = data.frame(cbind(test[2:6])))
}
ERR4= sum(predictions != test$Direction)/n.test;ERR4
ERR[,4]= ERR4
for (i in 2:9){
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089)],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
mean(ERR)
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#K=1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
mean(ERR)
cv = matrix NA, nrow = 1, ncol = 3, dimnames=list(NULL,c("K=1","K=3","K=7"))
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
cv = matrix (NA, nrow = 1, ncol = 3, dimnames=list(NULL,c("K=1","K=3","K=7"))
/
,;,
cv = matrix (NA, nrow = 1, ncol = 3, dimnames=list(NULL,c("K=1","K=3","K=7"))
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
cv = matrix (NA, nrow = 1, ncol = 3, dimnames=list(NULL,c("K=1","K=3","K=7")))
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=1, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=1, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV[1] = mean(ERR);CV[1]
cv[,1] = CV[1]
CV1 = mean(ERR);CV1
cv[,1] = CV1
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=3, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=3, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV3 = mean(ERR);CV3
cv[,2] = CV3
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=7, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=7, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV7 = mean(ERR);CV7
cv[,3] = CV7
cv
cv = matrix (NA, nrow = 1, ncol = 3, dimnames=list(NULL,c("K=1","K=3","K=7")))
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
##For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=1, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
## k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=1, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV1 = mean(ERR);CV1
cv[,1] = CV1
#K=3
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#For k = 1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=3, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=3, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV3 = mean(ERR);CV3
cv[,2] = CV3
For K = 7
KNN.decision(new.point, K=5, lag.data)
lag.data = data.frame(cbind(Weekly[2:6]))
KNN.decision <- function(new.point = c(1:5), K = 5, lag.data) {
n <- nrow(lag.data)
stopifnot(K <= n)
stopifnot( length(new.point) == 5, ncol(lag.data) == 5, K <= n)
dists = sqrt((lag.data[,1]-new.point[1])^2 + (lag.data[,2]-new.point[2])^2+(lag.data[,3]-new.point[3])^2+(lag.data[,4]-new.point[4])^2+(lag.data[,5]-new.point[5])^2)
ord.indices <- sort(dists, index.return = TRUE)[[2]]
neighb.dir  <- Weekly$Direction[ord.indices[1:K]]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
# If I use a vector: new.point = c(2.1,2.3,2.4,2.7,2.8), which has length 5 to test the KNN function:
new.point = c(2.1,2.3,2.4,2.7,2.8)
KNN.decision(new.point, K=5, lag.data)
length(new.point)
ncol(lag.data)
new.point = c(2.1,2.3,2.4,2.7,2.8)
length(new.point)
ncol(lag.data)
KNN.decision(new.point, K=5, lag.data)
test  = Weekly[Weekly$Year <= 2008, ]
train <- Weekly[Weekly$Year > 2008,]
n.test <- nrow(test)
predictions <- rep(NA, n.test)
for (i in 1:n.test){
predictions[i] <- KNN.decision(new.point=c(test$Lag1[i],test$Lag2[i],test$Lag3[i],test$Lag4[i],test$Lag5[i]),K=5, lag.data = data.frame(cbind(test[2:6])))
}
test.error <- sum(predictions != test$Direction)/n.test
test.error
test  = Weekly[Weekly$Year <= 2008, ]
train <- Weekly[Weekly$Year > 2008,]
n.test <- nrow(test)
predictions <- rep(NA, n.test)
for (i in 1:n.test){
predictions[i] <- KNN.decision(new.point=c(test$Lag1[i],test$Lag2[i],test$Lag3[i],test$Lag4[i],test$Lag5[i]), K=3, lag.data = data.frame(cbind(test[2:6])))
}
test.error <- sum(predictions != test$Direction)/n.test
test.error
ERR = matrix(NA, nrow = 1, ncol = 9, dimnames=list(NULL,c("ERR1","ERR2","ERR3","ERR4","ERR5","ERR6","ERR7","ERR8","ERR9")))
#K=1
test  = Weekly[fold[1:121],]
train = Weekly[fold[(122:1089)]]
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR1= sum(predictions != test$Direction)/n.test ;ERR1
ERR[,1] = ERR1
# k = 2 TO k = 9
for (i in 2:9)
{
test  = Weekly[fold[((i-1)*121+1):(i*121)],]
train1 = Weekly[fold[(i*121+1):1089],]
train2 = Weekly[fold[1:(121*(i-1))],]
train = rbind(train1,train2)
n.test = nrow(test)
predictions <- rep(NA, n.test)
for (b in 1:n.test){
predictions[b] <- KNN.decision(new.point=c(test$Lag1[b],test$Lag2[b],test$Lag3[b],test$Lag4[b],test$Lag5[b]), K=5, lag.data = data.frame(cbind(test[2:6])))
}
ERR[i]= sum(predictions != test$Direction)/n.test;ERR[i]
ERR[,i]=ERR[i]
}
ERR
CV = mean(ERR);CV
setwd("~/Desktop/2016 fall/5206/hw3")
hw3 = "~/Desktop/2016 fall/5206/hw3/NetsSchedule.html"
nets = readLines(hw3)
length = length(readLines(hw3)); length
# There are 811 lines in this html file.
```
b. What is the total number of characters in the file?
```{r}
sum(nchar(nets))
max(nchar(nets))
team.lines = grep(pattern="0 PM", x=nets);team.lines
length(team.lines)
nets[315]
nets[397]
?regexp
grep("O PM", nets, value = TRUE)
regexpr("0 PM", nets, perl=TRUE)
regexpr("0 PM", nets, perl=TRUE)
regexpr("0 PM", nets, perl=TRUE)
?regmatches()
regmatches("O PM",nets,perl = TRUE)
regmatches("O PM",nets)
regmatches(nets,m)
m = regexpr("0 PM", nets, perl=TRUE)
regmatches(nets,m)
m = regexpr("0 PM", nets, perl=TRUE)
m
regmatches(nets,m,invert = TRUE)
regmatches(nets,m)
?regexpr
?regmatches()
x <- c("A and B", "A, B and C", "A, B, C and D", "foobar")
pattern <- "[[:space:]]*(,|and)[[:space:]]"
## Match data from regexpr()
m <- regexpr(pattern, x)
regmatches(x, m)
pattern
regmatches(x, m, invert = TRUE)
regmatches(x, m)
pattern <- "[[:space:]]*(,)[[:space:]]"
m = regexpr(pattern, nets, perl=TRUE)
Date = regmatches(nets,m)
Date
pattern <- "[[wed]]*(,)[[oct]]"
m = regexpr(pattern, nets, perl=TRUE)
Date = regmatches(nets,m)
```
pattern <- "[[:alpha:]*(,)[[[:alnum:]]"
m = regexpr(pattern, nets, perl=TRUE)
Date = regmatches(nets,m)
Date
pattern <- "O PM"
m = regexpr(pattern, nets, perl=TRUE)
Date = regmatches(nets,m)
pattern <- '(0[1-9]|1[0-9]|2[0-9]|3[0-1])'
pattern <- '(0[1-9]|1[0-9]|2[0-9]|3[0-1])'
regmatches(nets,m)
var hourReg = '([0-1][0-9]|2[0-3])'
hourReg = '([0-1][0-9]|2[0-3])'
pattern <- hourReg + ":"+minReg
m <- regexpr(pattern, nets)
regmatches(x, m)
regmatches(nets, m)
pattern = "0 PM"
m <- regexpr(pattern, nets)
regmatches(nets, m)
m <- regexpr(pattern, nets)
regmatches(nets, m)
pattern = "@"
m <- regexpr(pattern, nets)
regmatches(nets, m)
m <- regexpr(pattern1, nets)
regmatches(nets, m)
pattern1 = "vs"
m <- regexpr(pattern1, nets)
regmatches(nets, m)
